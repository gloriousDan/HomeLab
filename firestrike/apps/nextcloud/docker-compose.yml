version: '3.3'

volumes:
  nextcloud-db:
    driver: local
  redis:
    driver: local
  nextcloud-main:
    driver: local
  apps:
    driver: local
  config:
    driver: local
  data:
    driver: local
  db_dumps:
    driver: local
  duplicacy_config:
    driver: local
  rclone_azure_volume:
    # To use this install rclone plugin: 
    # rclone/docker-volume-rclone:amd64 --grant-all-permissions --alias rclone
    driver: rclone:latest
    driver_opts:
      type: azureblob
      path: $AZURE_BLOB_CONTAINER
      azureblob-account: $AZURE_BLOB_ACCOUNT
      azureblob-key: $AZURE_BLOB_KEY
      allow_other: 'true'
  rclone_azure_volume_db:
    # To use this install rclone plugin: 
    # rclone/docker-volume-rclone:amd64 --grant-all-permissions --alias rclone
    driver: rclone:latest
    driver_opts:
      type: azureblob
      path: $AZURE_BLOB_CONTAINER_DB
      azureblob-account: $AZURE_BLOB_ACCOUNT
      azureblob-key: $AZURE_BLOB_KEY
      allow_other: 'true'

services:
  # todo replace postgres db with sqlite database
  db:
    restart: always
    image: postgres:11
    networks:
      - nextcloud
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - nextcloud-db:/var/lib/postgresql/data
      - db_dumps:/tmp/dumps
    labels:
      - docker-volume-backup.exec-pre=/bin/sh -c 'pg_dump -U $POSTGRES_USER nextcloud > /tmp/dumps/dump.sql'
      - docker-volume-backup.exec-label=nextcloud_database

  redis:
    image: redis:7.0.3
    restart: always
    networks:
      - nextcloud
    volumes:
      - redis:/var/lib/redis
    labels:
      - docker-volume-backup.stop-during-backup=nextcloud

  cron:
    image: nextcloud:24.0.2
    restart: unless-stopped
    volumes:
      - nextcloud-main:/var/www/html
      - apps:/var/www/html/custom_apps
      - config:/var/www/html/config
      - data:/var/www/html/data
    labels:
      - docker-volume-backup.stop-during-backup=nextcloud
    networks:
      - nextcloud
    entrypoint: /cron.sh

  nextcloud:
    image: nextcloud:24.0.2
    restart: always
    networks:
      - default
      - nextcloud
    depends_on:
      - redis
      - db
    labels:
      - traefik.enable=true
      - traefik.http.routers.nextcloud.middlewares=nextcloud,nc_well_known_redirect,nc_redirect_main_domain
      - traefik.http.routers.nextcloud.tls.certresolver=ncresolver
      - traefik.http.routers.nextcloud.rule=Host(`cloud.${BASE_DOMAIN}`) ||
        Host(`cloud.${BASE_PERSONAL_DOMAIN}`) ||
        Host(`cloud.${BASE_ALT_DOMAIN}`)
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM
        https://cloud.${BASE_DOMAIN}
      - traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors'self'
        ${BASE_DOMAIN} *.${BASE_DOMAIN}
      - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
      - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.nextcloud.headers.stsPreload=true
      - traefik.http.middlewares.nc_well_known_redirect.redirectregex.regex=/.well-known/(card|cal)dav
      - traefik.http.middlewares.nc_well_known_redirect.redirectregex.replacement=/remote.php/dav/
      - traefik.http.middlewares.nc_redirect_main_domain.redirectregex.regex=^https://cloud.(${BASE_PERSONAL_DOMAIN}|${BASE_ALT_DOMAIN})/(.*)
      - traefik.http.middlewares.nc_redirect_main_domain.redirectregex.replacement=https://cloud.${BASE_DOMAIN}/$${1}
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsvalue=SAMEORIGIN
      - REDIS_HOST=redis
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.${BASE_DOMAIN}
      - TRUSTED_PROXIES=172.18.0.0/16
      - docker-volume-backup.stop-during-backup=nextcloud
    volumes:
      - nextcloud-main:/var/www/html
      - apps:/var/www/html/custom_apps
      - config:/var/www/html/config
      - data:/var/www/html/data

        #backup-rclone:
        #  image: offen/docker-volume-backup:v2.20.0
        #  restart: always
        #  env_file: ./backup.env
        #  environment:
        #    BACKUP_CRON_EXPRESSION: "0 4 * * 1"
        #    BACKUP_RETENTION_DAYS: "14"
        #    BACKUP_STOP_CONTAINER_LABEL: "nextcloud"
        #    EXEC_LABEL: "nextcloud_database"
        #  volumes:
        #    - db_dumps:/backup/nc_db:ro
        #    - apps:/backup/nc_apps:ro
        #    - config:/backup/nc_config:ro
        #    - data:/backup/nc_data:ro
        #    - rclone_azure_volume:/archive
        #    - ./notifications.tmpl:/etc/dockervolumebackup/notifications.d/notifications.tmpl
        #    - /var/run/docker.sock:/var/run/docker.sock:ro

  backup-rclone-db:
    image: offen/docker-volume-backup:v2.20.0
    restart: always
    env_file: ./backup.env
    environment:
      BACKUP_CRON_EXPRESSION: "0 3 * * *"
      BACKUP_RETENTION_DAYS: "7"
      EXEC_LABEL: "nextcloud_database"
    volumes:
      - db_dumps:/backup/nc_db:ro
      - rclone_azure_volume_db:/archive
      - ./notifications_db.tmpl:/etc/dockervolumebackup/notifications.d/notifications.tmpl
      - /var/run/docker.sock:/var/run/docker.sock:ro
  
  backup-files-duplicacy:
    image: azinchen/duplicacy:1.0.3
    restart: always
    env_file: backup_duplicacy.env
    environment:
      BACKUP_CRON: "0 4 * * *"
      PRUNE_CRON: "0 6 * * *"
      PRE_BACKUP_SCRIPT: "/pre_backup.sh"
      POST_BACKUP_SCRIPT: "/post_backup.sh"
      RUN_JOB_IMMEDIATELY: "yes"
      PRUNE_KEEP_POLICIES: "1:7;7:30;30:180;0:360"
      SNAPSHOT_ID: 1
    volumes:
      - db_dumps:/data/nc_db:ro
      - apps:/data/nc_apps:ro
      - config:/data/nc_config:ro
      - data:/data/nc_data:ro
      - duplicacy_config:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./pre_backup.sh:/pre_backup.sh
      - ./post_backup.sh:/post_backup.sh


networks:
  default:
    external:
      name: traefik

  nextcloud:
    internal: true
